/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RegisterIndexRouteImport } from './routes/register/index'
import { Route as ProfileIndexRouteImport } from './routes/profile/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as AuctionIndexRouteImport } from './routes/auction/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterIndexRoute = RegisterIndexRouteImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileIndexRoute = ProfileIndexRouteImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuctionIndexRoute = AuctionIndexRouteImport.update({
  id: '/auction/',
  path: '/auction/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auction': typeof AuctionIndexRoute
  '/login': typeof LoginIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/register': typeof RegisterIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auction': typeof AuctionIndexRoute
  '/login': typeof LoginIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/register': typeof RegisterIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auction/': typeof AuctionIndexRoute
  '/login/': typeof LoginIndexRoute
  '/profile/': typeof ProfileIndexRoute
  '/register/': typeof RegisterIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auction' | '/login' | '/profile' | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auction' | '/login' | '/profile' | '/register'
  id: '__root__' | '/' | '/auction/' | '/login/' | '/profile/' | '/register/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuctionIndexRoute: typeof AuctionIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
  RegisterIndexRoute: typeof RegisterIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register/': {
      id: '/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auction/': {
      id: '/auction/'
      path: '/auction'
      fullPath: '/auction'
      preLoaderRoute: typeof AuctionIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuctionIndexRoute: AuctionIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  ProfileIndexRoute: ProfileIndexRoute,
  RegisterIndexRoute: RegisterIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
